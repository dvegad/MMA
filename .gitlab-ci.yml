image: docker:stable

services:
  - docker:dind

stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

# ┌───────────────────────────────────────────────────────────────────────────┐
# │ Build: construir la imagen Docker y subirla al registry de GitLab         │
# └───────────────────────────────────────────────────────────────────────────┘
build_image:
  stage: build
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"
  only:
    - main

# ┌───────────────────────────────────────────────────────────────────────────┐
# │ Deploy: opcional, si tienes un runner con acceso a producción             │
# └───────────────────────────────────────────────────────────────────────────┘
deploy_to_production:
  stage: deploy
  script:
    # Aquí es donde orquestas la actualización en tu servidor/cluster,
    # por ejemplo, enviar notificación a un servidor SSH o disparar un helm upgrade.
    # Ejemplo ficticio usando ssh + docker pull:
    - |
      ssh ubuntu@mi-servidor << 'EOF'
        docker pull "$CI_REGISTRY_IMAGE:latest"
        docker stop dashboard_aire || true
        docker rm dashboard_aire  || true
        docker run -d \
          --name dashboard_aire \
          --env-file /path/to/.env_production \
          -p 80:8501 \
          "$CI_REGISTRY_IMAGE:latest"
      EOF
  only:
    - main
